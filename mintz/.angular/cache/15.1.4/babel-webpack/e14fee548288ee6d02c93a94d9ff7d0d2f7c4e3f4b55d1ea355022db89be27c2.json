{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Cliente } from '../cliente/cliente.model';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(clienteService, routes, notificacaoService, formBuilder) {\n    this.clienteService = clienteService;\n    this.routes = routes;\n    this.notificacaoService = notificacaoService;\n    this.formBuilder = formBuilder;\n    this.msg = \"\";\n    this.cliente = new Cliente();\n    this.clienteRecuperacao = new Cliente();\n    this.clienteNovo = new Cliente();\n    this.senha = \"\";\n    this.confirmarSenha = \"\";\n    this.senhasDiferentes = false;\n    this.formCadastro = this.formBuilder.group({\n      nome: [\"\", [Validators.minLength(4), Validators.required]],\n      email: [\"\", [Validators.email, Validators.required]],\n      cpf: [\"\", [Validators.max(11), Validators.min(11), Validators.required]],\n      senha: [\"\", [Validators.min(6), Validators.required]],\n      logradouro: [\"\", [Validators.required]],\n      bairro: [\"\", [Validators.required]],\n      cidade: [\"\", [Validators.required]],\n      uf: [\"\", [Validators.max(2), Validators.min(2), Validators.required]],\n      cep: [\"\", [Validators.max(8), Validators.min(8), Validators.required]]\n    });\n  }\n  ngOnInit() {\n    const clienteLogado = localStorage.getItem(\"cliente\");\n    if (clienteLogado != null) {\n      window.location.href = \"/minha-conta\";\n    }\n  }\n  cadastrar() {\n    if (this.clienteNovo.senha.length > 0) {\n      if (!this.senhasDiferentes) {\n        try {\n          this.clienteService.inserir(this.clienteNovo);\n          this.msg = \"Cadastro efetuado com sucesso\";\n          window.alert(this.msg);\n          this.logar(this.clienteNovo);\n        } catch (error) {\n          this.msg = \"Ops, parece que algo deu errado\";\n          this.notificacaoService.notificar(this.msg);\n        }\n        document.getElementById('divCadastro').style.display = 'none';\n      } else {\n        this.notificacaoService.notificar(\"A senha e a confirmação não batem\");\n        return;\n      }\n    } else {\n      this.notificacaoService.notificar(\"A senha não pode ser vazia\");\n      return;\n    }\n  }\n  recuperarSenha() {\n    try {\n      this.clienteService.recuperarSenha(this.clienteRecuperacao).subscribe(resposta => {\n        if (resposta.nome == null) {\n          //Se a resposta for nula, significa que o usuário cujo email e senha informados não foi localizado\n          this.msg = \"Email não localizado\";\n          this.notificacaoService.notificar(this.msg);\n        } else {\n          //Se encontrar, recebe os valores\n          this.clienteRecuperacao.id = resposta.id;\n          this.clienteRecuperacao.bairro = resposta.bairro;\n          this.clienteRecuperacao.cep = resposta.cep;\n          this.clienteRecuperacao.cidade = resposta.cidade;\n          this.clienteRecuperacao.complemento = resposta.complemento;\n          this.clienteRecuperacao.cpf = resposta.cpf;\n          this.clienteRecuperacao.email = resposta.email;\n          this.clienteRecuperacao.logradouro = resposta.logradouro;\n          this.clienteRecuperacao.nome = resposta.nome;\n          this.clienteRecuperacao.senha = resposta.senha;\n          this.clienteRecuperacao.uf = resposta.uf;\n          //Chama o novo modal para atualizar a senha\n          document.getElementById('divNovaSenha').style.display = 'block';\n        }\n      });\n    } catch (error) {\n      this.msg = \"Ops, parece que algo deu errado\";\n      this.notificacaoService.notificar(this.msg);\n    }\n    document.getElementById('divEsqueciSenha').style.display = 'none';\n  }\n  atualizarSenha() {\n    if (this.senha.length > 0) {\n      if (!this.senhasDiferentes) {\n        this.clienteRecuperacao.senha = this.senha;\n      } else {\n        this.notificacaoService.notificar(\"A senha e a confirmação não batem\");\n        return;\n      }\n    } else {\n      this.notificacaoService.notificar(\"A senha não pode ser vazia\");\n      return;\n    }\n    try {\n      this.clienteService.atualizar(this.clienteRecuperacao);\n      this.cliente = this.clienteRecuperacao;\n      /*\r\n      localStorage.setItem(\"cliente\", JSON.stringify(this.clienteRecuperacao));\r\n      this.notificacaoService.notificar(\"Senha recuperada com sucesso! Bem-vindo, \" + this.clienteRecuperacao.nome);\r\n      window.location.href = \"./produtos\";\r\n      */\n      const aguardar = ms => new Promise(resolve => setTimeout(resolve, ms));\n      aguardar(1000).then(() => {\n        this.logar(this.clienteRecuperacao);\n      });\n      alert(\"Senha recuperada com sucesso\");\n    } catch (error) {\n      this.notificacaoService.notificar(\"Ops, parece que algo deu errado\");\n    }\n  }\n  verificarSenhas(senha, confirmarSenha) {\n    this.senhasDiferentes = senha !== confirmarSenha;\n  }\n  logar(login) {\n    try {\n      this.clienteService.logar(login).subscribe(resposta => {\n        if (resposta.nome == null) {\n          //Se a resposta for nula, significa que o usuário cujo email e senha informados não foi localizado\n          this.msg = \"Email ou senha incorretos\";\n          this.notificacaoService.notificar(this.msg);\n        } else {\n          //Se encontrar o usuário, salvará no local storage\n          localStorage.setItem(\"cliente\", JSON.stringify(resposta));\n          this.notificacaoService.notificar(\"Login efetuado com sucesso. Bem-vindo, \" + resposta.nome);\n          window.location.href = \"./produtos\";\n        }\n      });\n    } catch (error) {\n      this.msg = \"Ops, parece que algo deu errado\";\n      this.notificacaoService.notificar(this.msg);\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":"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","names":["Component","Cliente","Validators","LoginComponent","constructor","clienteService","routes","notificacaoService","formBuilder","group","nome","minLength","required","email","cpf","max","min","senha","logradouro","bairro","cidade","uf","cep","ngOnInit","clienteLogado","localStorage","getItem","window","location","href","cadastrar","clienteNovo","length","senhasDiferentes","inserir","msg","alert","logar","error","notificar","document","getElementById","style","display","recuperarSenha","clienteRecuperacao","subscribe","resposta","id","complemento","atualizarSenha","atualizar","cliente","aguardar","ms","Promise","resolve","setTimeout","then","verificarSenhas","confirmarSenha","login","setItem","JSON","stringify","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\OneDrive - Fatec Centro Paula Souza\\Documentos\\Estudos\\Fatec_ADS\\4-Web\\pw-p2\\mintz\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Cliente } from '../cliente/cliente.model';\r\nimport { ClienteService } from '../services/cliente.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { NotificacaoService } from '../services/notificacao.service';\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent { //implements OnInit\r\n  msg: string = \"\";\r\n  cliente: Cliente = new Cliente();\r\n  clienteRecuperacao: Cliente = new Cliente();\r\n  clienteNovo: Cliente = new Cliente();\r\n  senha: string = \"\";\r\n  confirmarSenha: string = \"\";\r\n  senhasDiferentes: boolean = false;\r\n  formCadastro = this.formBuilder.group({\r\n    nome: [\"\", [\r\n      Validators.minLength(4),\r\n      Validators.required\r\n    ]],\r\n    email: [\"\", [\r\n      Validators.email,\r\n      Validators.required\r\n    ]],\r\n    cpf: [\"\", [\r\n      Validators.max(11),\r\n      Validators.min(11),\r\n      Validators.required\r\n    ]],\r\n    senha: [\"\", [\r\n      Validators.min(6),\r\n      Validators.required\r\n    ]],\r\n    logradouro: [\"\", [\r\n      Validators.required\r\n    ]],\r\n    bairro: [\"\", [\r\n      Validators.required\r\n    ]],\r\n    cidade: [\"\", [\r\n      Validators.required\r\n    ]],\r\n    uf: [\"\", [\r\n      Validators.max(2),\r\n      Validators.min(2),\r\n      Validators.required\r\n    ]],\r\n    cep: [\"\", [\r\n      Validators.max(8),\r\n      Validators.min(8),\r\n      Validators.required\r\n    ]]\r\n  });\r\n\r\n  constructor(\r\n    private clienteService: ClienteService,\r\n    private routes: ActivatedRoute,\r\n    private notificacaoService: NotificacaoService,\r\n    private formBuilder: FormBuilder\r\n  ){}\r\n\r\n  ngOnInit(){\r\n    const clienteLogado = localStorage.getItem(\"cliente\");\r\n    if (clienteLogado != null) {\r\n      window.location.href = \"/minha-conta\"\r\n      \r\n    }\r\n  }\r\n    \r\n  cadastrar(): void{\r\n    if (this.clienteNovo.senha.length > 0) {\r\n      if (!this.senhasDiferentes) {\r\n        try {\r\n          this.clienteService.inserir(this.clienteNovo);\r\n          this.msg = \"Cadastro efetuado com sucesso\"\r\n          window.alert(this.msg);\r\n          this.logar(this.clienteNovo);\r\n        } catch (error) {\r\n          this.msg = \"Ops, parece que algo deu errado\";\r\n          this.notificacaoService.notificar(this.msg);\r\n        }\r\n        (document.getElementById('divCadastro') as HTMLElement).style.display = 'none';\r\n\r\n      } else {\r\n        this.notificacaoService.notificar(\"A senha e a confirmação não batem\");\r\n        return;\r\n      }\r\n    } else {\r\n      this.notificacaoService.notificar(\"A senha não pode ser vazia\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  recuperarSenha(): void{\r\n    try {\r\n      this.clienteService.recuperarSenha(this.clienteRecuperacao).subscribe(\r\n        (resposta: Cliente) => {\r\n          if (resposta.nome == null) {\r\n            //Se a resposta for nula, significa que o usuário cujo email e senha informados não foi localizado\r\n            this.msg = \"Email não localizado\";\r\n            this.notificacaoService.notificar(this.msg);\r\n          } else {\r\n            //Se encontrar, recebe os valores\r\n            this.clienteRecuperacao.id = resposta.id;\r\n            this.clienteRecuperacao.bairro = resposta.bairro;\r\n            this.clienteRecuperacao.cep = resposta.cep;\r\n            this.clienteRecuperacao.cidade = resposta.cidade;\r\n            this.clienteRecuperacao.complemento = resposta.complemento;\r\n            this.clienteRecuperacao.cpf = resposta.cpf;\r\n            this.clienteRecuperacao.email = resposta.email;\r\n            this.clienteRecuperacao.logradouro = resposta.logradouro;\r\n            this.clienteRecuperacao.nome = resposta.nome;\r\n            this.clienteRecuperacao.senha = resposta.senha;\r\n            this.clienteRecuperacao.uf = resposta.uf;\r\n\r\n            //Chama o novo modal para atualizar a senha\r\n            (document.getElementById('divNovaSenha') as HTMLElement).style.display='block';\r\n          }\r\n        }\r\n      );\r\n      \r\n    } catch (error) {\r\n      this.msg = \"Ops, parece que algo deu errado\"\r\n      this.notificacaoService.notificar(this.msg);\r\n    }\r\n\r\n    (document.getElementById('divEsqueciSenha') as HTMLElement).style.display = 'none';\r\n  }\r\n\r\n  atualizarSenha(): void{\r\n    if (this.senha.length > 0) {\r\n      if (!this.senhasDiferentes) {\r\n        this.clienteRecuperacao.senha = this.senha;\r\n      } else {\r\n        this.notificacaoService.notificar(\"A senha e a confirmação não batem\");\r\n        return;\r\n      }\r\n    } else {\r\n      this.notificacaoService.notificar(\"A senha não pode ser vazia\");\r\n      return;\r\n    }\r\n    try {\r\n        this.clienteService.atualizar(this.clienteRecuperacao);\r\n        this.cliente = this.clienteRecuperacao;\r\n        /*\r\n        localStorage.setItem(\"cliente\", JSON.stringify(this.clienteRecuperacao));\r\n        this.notificacaoService.notificar(\"Senha recuperada com sucesso! Bem-vindo, \" + this.clienteRecuperacao.nome);\r\n        window.location.href = \"./produtos\";\r\n        */\r\n        \r\n        const aguardar = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n        aguardar(1000).then(() => {\r\n          this.logar(this.clienteRecuperacao);\r\n        });\r\n\r\n        alert(\"Senha recuperada com sucesso\");\r\n    } catch (error) {\r\n      this.notificacaoService.notificar(\"Ops, parece que algo deu errado\");\r\n    }\r\n  }\r\n\r\n  verificarSenhas(senha: string, confirmarSenha: string): void{\r\n    this.senhasDiferentes = senha !== confirmarSenha;\r\n  }\r\n\r\n  logar(login: Cliente): void{\r\n    try {\r\n      this.clienteService.logar(login).subscribe(\r\n        (resposta: Cliente) => {\r\n          if (resposta.nome == null) {\r\n            //Se a resposta for nula, significa que o usuário cujo email e senha informados não foi localizado\r\n            this.msg = \"Email ou senha incorretos\";\r\n            this.notificacaoService.notificar(this.msg);\r\n          } else {\r\n            //Se encontrar o usuário, salvará no local storage\r\n            localStorage.setItem(\"cliente\", JSON.stringify(resposta));\r\n            this.notificacaoService.notificar(\"Login efetuado com sucesso. Bem-vindo, \" + resposta.nome);\r\n            window.location.href = \"./produtos\";\r\n          }\r\n        }\r\n      );\r\n      \r\n    } catch (error) {\r\n      this.msg = \"Ops, parece que algo deu errado\"\r\n      this.notificacaoService.notificar(this.msg);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}